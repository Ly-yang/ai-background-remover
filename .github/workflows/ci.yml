# .github/workflows/ci.yml - 持续集成
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        pip install flake8 black isort mypy pytest
        pip install -r backend/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: black --check backend/
    
    - name: Check import sorting with isort
      run: isort --check-only backend/
    
    - name: Type checking with mypy
      run: mypy backend/ --ignore-missing-imports
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint
    
    - name: Check frontend formatting
      run: |
        cd frontend
        npm run format:check

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 安全扫描
  security-scan:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker构建和推送
  build-and-push:
    needs: [code-quality, backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [frontend, backend, ai-models]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 部署到开发环境
  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to development
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          cd /opt/ai-background-remover
          git pull origin develop
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
  # 部署到生产环境
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/ai-background-remover
          git pull origin main
          docker-compose -f infrastructure/docker/docker-compose.prod.yml down
          docker-compose -f infrastructure/docker/docker-compose.prod.yml pull
          docker-compose -f infrastructure/docker/docker-compose.prod.yml up -d
          
    - name: Health check
      run: |
        sleep 30
        curl -f https://your-domain.com/health || exit 1

---

# .github/workflows/security.yml - 安全扫描
name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # Python依赖安全扫描
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install safety
      run: pip install safety
    
    - name: Check Python dependencies
      run: |
        pip install -r backend/requirements.txt
        safety check
    
    # Node.js依赖安全扫描
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Audit Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level high

  container-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build images for scanning
      run: |
        docker build -t ai-remover/backend:scan ./backend
        docker build -t ai-remover/frontend:scan ./frontend
        docker build -t ai-remover/ai-models:scan ./ai-models
    
    - name: Scan backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ai-remover/backend:scan'
        format: 'sarif'
        output: 'backend-scan.sarif'
    
    - name: Upload backend scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'backend-scan.sarif'
        category: 'backend-container'

---

# scripts/setup.sh - 初始化脚本
#!/bin/bash

set -e

echo "🚀 初始化 AI Background Remover 项目..."

# 检查Docker和Docker Compose
if ! command -v docker &> /dev/null; then
    echo "❌ Docker 未安装，请先安装Docker"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "❌ Docker Compose 未安装，请先安装Docker Compose"
    exit 1
fi

# 检查NVIDIA Docker支持（可选）
if command -v nvidia-docker &> /dev/null; then
    echo "✅ NVIDIA Docker 支持已安装"
    GPU_SUPPORT=true
else
    echo "⚠️  NVIDIA Docker 支持未安装，将使用CPU模式"
    GPU_SUPPORT=false
fi

# 创建必要的目录
echo "📁 创建项目目录..."
mkdir -p uploads/{original,processed,temp}
mkdir -p models/{rmbg,u2net,birefnet,sam,isnet}
mkdir -p logs
mkdir -p ssl

# 生成环境变量文件
echo "🔧 生成环境变量文件..."
if [ ! -f .env ]; then
    cat > .env << EOF
# 环境配置
ENV=development
DEBUG=true

# 数据库配置
POSTGRES_DB=airemover
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$(openssl rand -base64 32)
DATABASE_URL=postgresql://postgres:$(openssl rand -base64 32)@db:5432/airemover

# Redis配置
REDIS_PASSWORD=$(openssl rand -base64 32)
REDIS_URL=redis://:$(openssl rand -base64 32)@redis:6379

# 安全密钥
SECRET_KEY=$(openssl rand -base64 64)
JWT_SECRET_KEY=$(openssl rand -base64 64)

# API配置
API_V1_STR=/api/v1
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# 文件上传配置
MAX_FILE_SIZE=10485760  # 10MB
UPLOAD_DIR=./uploads

# AI模型配置
DEFAULT_MODEL=rmbg-2.0
MODEL_CACHE_SIZE=1000
GPU_ENABLED=$GPU_SUPPORT

# 监控配置
GRAFANA_PASSWORD=$(openssl rand -base64 32)
GRAFANA_SECRET_KEY=$(openssl rand -base64 32)
EOF
    echo "✅ 环境变量文件已生成"
else
    echo "⚠️  环境变量文件已存在，跳过生成"
fi

# 设置权限
echo "🔒 设置文件权限..."
chmod +x scripts/*.sh
chmod 600 .env

# 拉取Docker镜像
echo "📦 拉取Docker镜像..."
docker-compose pull || true

# 构建服务
echo "🏗️  构建服务..."
docker-compose build

# 初始化数据库
echo "💾 初始化数据库..."
docker-compose up -d db redis
sleep 10

# 运行数据库迁移
echo "🔄 运行数据库迁移..."
docker-compose run --rm backend python -m alembic upgrade head

echo "✅ 项目初始化完成！"
echo ""
echo "🚀 启动服务: docker-compose up -d"
echo "📊 访问应用: http://localhost:3000"
echo "📋 API文档: http://localhost:8000/docs"
echo "📈 监控面板: http://localhost:3001 (admin/admin)"
echo ""

---

# scripts/deploy.sh - 部署脚本
#!/bin/bash

set -e

ENVIRONMENT=${1:-development}
VERSION=${2:-latest}

echo "🚀 部署 AI Background Remover 到 $ENVIRONMENT 环境..."

# 检查参数
if [[ "$ENVIRONMENT" != "development" && "$ENVIRONMENT" != "production" ]]; then
    echo "❌ 环境参数错误，请使用 'development' 或 'production'"
    exit 1
fi

# 设置部署配置
if [ "$ENVIRONMENT" = "production" ]; then
    COMPOSE_FILE="infrastructure/docker/docker-compose.prod.yml"
    ENV_FILE=".env.prod"
else
    COMPOSE_FILE="docker-compose.yml"
    ENV_FILE=".env"
fi

# 检查环境文件
if [ ! -f "$ENV_FILE" ]; then
    echo "❌ 环境文件 $ENV_FILE 不存在"
    exit 1
fi

# 备份当前版本
if [ "$ENVIRONMENT" = "production" ]; then
    echo "💾 备份当前版本..."
    BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # 备份数据库
    docker-compose -f "$COMPOSE_FILE" exec -T db pg_dump -U postgres airemover > "$BACKUP_DIR/database.sql"
    
    # 备份上传文件
    cp -r uploads "$BACKUP_DIR/"
    
    echo "✅ 备份完成: $BACKUP_DIR"
fi

# 拉取最新代码
echo "📥 拉取最新代码..."
git pull origin main

# 拉取最新镜像
echo "📦 拉取最新镜像..."
docker-compose -f "$COMPOSE_FILE" pull

# 停止服务
echo "⏹️  停止旧服务..."
docker-compose -f "$COMPOSE_FILE" down

# 启动新服务
echo "▶️  启动新服务..."
docker-compose -f "$COMPOSE_FILE" up -d

# 等待服务启动
echo "⏳ 等待服务启动..."
sleep 30

# 健康检查
echo "🔍 执行健康检查..."
for i in {1..10}; do
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "✅ 服务启动成功"
        break
    fi
    
    if [ $i -eq 10 ]; then
        echo "❌ 服务启动失败"
        
        # 显示日志
        echo "📋 服务日志:"
        docker-compose -f "$COMPOSE_FILE" logs --tail=50
        
        exit 1
    fi
    
    echo "⏳ 等待服务启动... ($i/10)"
    sleep 10
done

# 清理旧镜像
echo "🧹 清理旧镜像..."
docker image prune -f

echo "✅ 部署完成！"

if [ "$ENVIRONMENT" = "production" ]; then
    echo "🌐 生产环境访问地址: https://your-domain.com"
else
    echo "🌐 开发环境访问地址: http://localhost:3000"
fi

---

# scripts/test.sh - 测试脚本
#!/bin/bash

set -e

echo "🧪 运行测试套件..."

# 启动测试依赖服务
echo "🚀 启动测试依赖服务..."
docker-compose -f docker-compose.test.yml up -d db redis

# 等待服务启动
sleep 10

# 运行后端测试
echo "🐍 运行后端测试..."
docker-compose -f docker-compose.test.yml run --rm backend python -m pytest tests/ -v --cov=app --cov-report=html --cov-report=xml

# 运行前端测试
echo "⚛️  运行前端测试..."
docker-compose -f docker-compose.test.yml run --rm frontend npm test -- --coverage --watchAll=false

# 运行集成测试
echo "🔗 运行集成测试..."
docker-compose -f docker-compose.test.yml run --rm integration-tests python -m pytest tests/integration/ -v

# 运行性能测试
echo "⚡ 运行性能测试..."
docker-compose -f docker-compose.test.yml run --rm load-tests artillery run tests/load/basic-load.yml

# 清理测试环境
echo "🧹 清理测试环境..."
docker-compose -f docker-compose.test.yml down -v

# 生成测试报告
echo "📊 生成测试报告..."
echo "✅ 测试完成！"
echo "📋 覆盖率报告: htmlcov/index.html"
echo "📈 性能测试报告: reports/load-test-report.html"

---

# scripts/backup.sh - 备份脚本
#!/bin/bash

set -e

BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
RETENTION_DAYS=30

echo "💾 开始备份..."

# 创建备份目录
mkdir -p "$BACKUP_DIR"

# 备份数据库
echo "📊 备份数据库..."
docker-compose exec -T db pg_dump -U postgres airemover | gzip > "$BACKUP_DIR/database.sql.gz"

# 备份Redis数据
echo "🔴 备份Redis数据..."
docker-compose exec -T redis redis-cli BGSAVE
sleep 5
docker cp $(docker-compose ps -q redis):/data/dump.rdb "$BACKUP_DIR/redis.rdb"

# 备份上传文件
echo "📁 备份上传文件..."
tar -czf "$BACKUP_DIR/uploads.tar.gz" uploads/

# 备份配置文件
echo "⚙️  备份配置文件..."
cp .env "$BACKUP_DIR/"
cp docker-compose*.yml "$BACKUP_DIR/"

# 创建备份清单
echo "📋 创建备份清单..."
cat > "$BACKUP_DIR/backup_info.txt" << EOF
备份时间: $(date)
备份内容:
- database.sql.gz: PostgreSQL数据库备份
- redis.rdb: Redis数据备份
- uploads.tar.gz: 用户上传文件备份
- .env: 环境变量配置
- docker-compose*.yml: Docker Compose配置

恢复命令:
1. 恢复数据库: gunzip -c database.sql.gz | docker-compose exec -T db psql -U postgres airemover
2. 恢复Redis: docker cp redis.rdb \$(docker-compose ps -q redis):/data/dump.rdb && docker-compose restart redis
3. 恢复上传文件: tar -xzf uploads.tar.gz
EOF

# 计算备份大小
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
echo "✅ 备份完成: $BACKUP_DIR ($BACKUP_SIZE)"

# 清理旧备份
echo "🧹 清理 $RETENTION_DAYS 天前的备份..."
find backups/ -type d -name "????????_??????" -mtime +$RETENTION_DAYS -exec rm -rf {} \; 2>/dev/null || true

echo "💾 备份任务完成"

---

# scripts/restore.sh - 恢复脚本
#!/bin/bash

set -e

BACKUP_PATH=$1

if [ -z "$BACKUP_PATH" ]; then
    echo "❌ 请指定备份路径"
    echo "使用方法: $0 <backup_path>"
    echo "示例: $0 backups/20231201_120000"
    exit 1
fi

if [ ! -d "$BACKUP_PATH" ]; then
    echo "❌ 备份路径不存在: $BACKUP_PATH"
    exit 1
fi

echo "🔄 从备份恢复: $BACKUP_PATH"

# 确认操作
read -p "⚠️  这将覆盖当前数据，是否继续？(y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ 操作已取消"
    exit 1
fi

# 停止服务
echo "⏹️  停止服务..."
docker-compose down

# 恢复数据库
if [ -f "$BACKUP_PATH/database.sql.gz" ]; then
    echo "📊 恢复数据库..."
    docker-compose up -d db
    sleep 10
    
    # 删除现有数据库
    docker-compose exec db psql -U postgres -c "DROP DATABASE IF EXISTS airemover;"
    docker-compose exec db psql -U postgres -c "CREATE DATABASE airemover;"
    
    # 恢复数据
    gunzip -c "$BACKUP_PATH/database.sql.gz" | docker-compose exec -T db psql -U postgres airemover
    
    docker-compose down
fi

# 恢复Redis数据
if [ -f "$BACKUP_PATH/redis.rdb" ]; then
    echo "🔴 恢复Redis数据..."
    docker-compose up -d redis
    sleep 5
    
    docker-compose stop redis
    docker cp "$BACKUP_PATH/redis.rdb" $(docker-compose ps -q redis):/data/dump.rdb
    docker-compose start redis
    
    docker-compose down
fi

# 恢复上传文件
if [ -f "$BACKUP_PATH/uploads.tar.gz" ]; then
    echo "📁 恢复上传文件..."
    rm -rf uploads/
    tar -xzf "$BACKUP_PATH/uploads.tar.gz"
fi

# 恢复配置文件
if [ -f "$BACKUP_PATH/.env" ]; then
    echo "⚙️  恢复配置文件..."
    cp "$BACKUP_PATH/.env" .env
fi

# 启动服务
echo "▶️  启动服务..."
docker-compose up -d

# 等待服务启动
sleep 30

# 健康检查
echo "🔍 执行健康检查..."
if curl -f http://localhost/health > /dev/null 2>&1; then
    echo "✅ 恢复完成，服务正常运行"
else
    echo "❌ 服务启动异常，请检查日志"
    docker-compose logs --tail=20
    exit 1
fi

echo "🎉 数据恢复完成！"
